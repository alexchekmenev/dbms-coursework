<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DBMS Coursework</title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <link rel="stylesheet" href="https://vctrfrnndz.github.io/jquery-accordion/css/jquery.accordion.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
</head>
<body>

<h1>DBMS Coursework</h1>

<div data-accordion-group>

    <div class="accordion" data-accordion>
        <div data-control>Entity-Relation Model</div>
        <div data-content style="text-align: center">
            <iframe src="https://www.draw.io/?lightbox=1&highlight=0000ff&edit=_blank&layers=1&nav=1&title=market.html#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D0B-WRj4_Rb9T-LVgxMloxbFRJSkU%26export%3Ddownload"
                    height="600px" align="left" style="width: 95%">
                Ваш браузер не поддерживает плавающие фреймы!
            </iframe>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>Physical Data Model</div>
        <div data-content>
            <a href="https://dbdesigner.net/designer/schema/73005">DbDesigner</a>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>SQL structure</div>
        <div data-content>
            <div>
                <pre class="prettyprint lang-sql">
CREATE TABLE Product (
	id int NOT NULL,
	vendor_id int NOT NULL,
	category_id int NOT NULL,
	name varchar(256) NOT NULL,
	image_url varchar(256) NOT NULL,
	rating FLOAT NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE Vendor (
	id int NOT NULL UNIQUE,
	name varchar(50) NOT NULL UNIQUE,
	PRIMARY KEY (id)
);

CREATE TABLE Shop (
	id int NOT NULL UNIQUE,
	name varchar(50) NOT NULL UNIQUE,
	address varchar(50) NOT NULL,
	city_id int NOT NULL,
	rating FLOAT NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE ProductShop (
	product_id int NOT NULL,
	shop_id int NOT NULL,
	cnt int NOT NULL DEFAULT '0',
	delivery_type varchar(50) NOT NULL,
	price FLOAT NOT NULL,
	PRIMARY KEY (product_id,shop_id)
);

CREATE TABLE Category (
	id int NOT NULL,
	lft int NOT NULL UNIQUE,
	rgt int NOT NULL UNIQUE,
	name varchar(50) NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE ProductReview (
	id int NOT NULL,
	product_id int NOT NULL,
	comment varchar(1000) NOT NULL,
	points int NOT NULL,
	pros varchar(256) NOT NULL,
    cons varchar(256) NOT NULL,
	created TIMESTAMP NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE City (
	id int NOT NULL,
	name varchar(50) NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE Attribute (
	id int NOT NULL,
	name varchar(50) NOT NULL,
	data_type varchar(50) NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE CategoryAttributeValueTimestamp (
	attribute_id int NOT NULL,
	category_id int NOT NULL,
	attribute_value TIMESTAMP NOT NULL,
	PRIMARY KEY (attribute_id,category_id)
);

CREATE TABLE CategoryAttributeValueInt (
	attribute_id int NOT NULL,
	category_id int NOT NULL,
	attribute_value int NOT NULL,
	PRIMARY KEY (attribute_id,category_id)
);

CREATE TABLE CategoryAttributeValueFloat (
	attribute_id int NOT NULL,
	category_id int NOT NULL,
	attribute_value FLOAT NOT NULL,
	PRIMARY KEY (attribute_id,category_id)
);

CREATE TABLE CategoryAttributeValueVarchar (
	attribute_id int NOT NULL,
	category_id int NOT NULL,
	attribute_value varchar(256) NOT NULL,
	PRIMARY KEY (attribute_id,category_id)
);

CREATE TABLE ProductAttributeValueTimestamp (
	attribute_id int NOT NULL,
	product_id int NOT NULL,
	attribute_value TIMESTAMP NOT NULL,
	PRIMARY KEY (attribute_id,product_id)
);

CREATE TABLE ProductAttributeValueInt (
	attribute_id int NOT NULL,
	product_id int NOT NULL,
	attribute_value int NOT NULL,
	PRIMARY KEY (attribute_id,product_id)
);

CREATE TABLE ProductAttributeValueVarchar (
	attribute_id int NOT NULL,
	product_id int NOT NULL,
	attribute_value varchar(256) NOT NULL,
	PRIMARY KEY (attribute_id,product_id)
);

CREATE TABLE ProductAttributeValueFloat (
	attribute_id int NOT NULL,
	product_id int NOT NULL,
	attribute_value FLOAT NOT NULL,
	PRIMARY KEY (attribute_id,product_id)
);

CREATE TABLE ShopReview (
	id int NOT NULL,
	shop_id int NOT NULL,
	comment varchar(1000) NOT NULL,
	points int NOT NULL,
	pros varchar(256) NOT NULL,
    cons varchar(256) NOT NULL,
	created TIMESTAMP NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE ProductCity (
	product_id int NOT NULL,
	city_id int NOT NULL,
	min_price FLOAT NOT NULL,
	avg_price FLOAT NOT NULL,
	max_price FLOAT NOT NULL,
	PRIMARY KEY (product_id,city_id)
);


CREATE TABLE Comment (
	id int NOT NULL,
	product_id int NOT NULL,
	parent_id int NOT NULL,
	body varchar(1000) NOT NULL,
	username varchar(50) NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE Overview (
	id int NOT NULL,
	product_id int NOT NULL,
	url varchar(256) NOT NULL,
	PRIMARY KEY (id)
);

ALTER TABLE Product ADD CONSTRAINT Product_fk0 FOREIGN KEY (vendor_id) REFERENCES Vendor(id);

ALTER TABLE Product ADD CONSTRAINT Product_fk1 FOREIGN KEY (category_id) REFERENCES Category(id);

ALTER TABLE Shop ADD CONSTRAINT Shop_fk0 FOREIGN KEY (city_id) REFERENCES City(id);

ALTER TABLE ProductShop ADD CONSTRAINT ProductShop_fk0 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE ProductShop ADD CONSTRAINT ProductShop_fk1 FOREIGN KEY (shop_id) REFERENCES Shop(id);

ALTER TABLE ProductReview ADD CONSTRAINT ProductReview_fk0 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE CategoryAttributeValueTimestamp ADD CONSTRAINT CategoryAttributeValueTimestamp_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE CategoryAttributeValueTimestamp ADD CONSTRAINT CategoryAttributeValueTimestamp_fk1 FOREIGN KEY (category_id) REFERENCES Category(id);

ALTER TABLE CategoryAttributeValueInt ADD CONSTRAINT CategoryAttributeValueInt_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE CategoryAttributeValueInt ADD CONSTRAINT CategoryAttributeValueInt_fk1 FOREIGN KEY (category_id) REFERENCES Category(id);

ALTER TABLE CategoryAttributeValueFloat ADD CONSTRAINT CategoryAttributeValueFloat_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE CategoryAttributeValueFloat ADD CONSTRAINT CategoryAttributeValueFloat_fk1 FOREIGN KEY (category_id) REFERENCES Category(id);

ALTER TABLE CategoryAttributeValueVarchar ADD CONSTRAINT CategoryAttributeValueVarchar_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE CategoryAttributeValueVarchar ADD CONSTRAINT CategoryAttributeValueVarchar_fk1 FOREIGN KEY (category_id) REFERENCES Category(id);

ALTER TABLE ProductAttributeValueTimestamp ADD CONSTRAINT ProductAttributeValueTimestamp_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE ProductAttributeValueTimestamp ADD CONSTRAINT ProductAttributeValueTimestamp_fk1 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE ProductAttributeValueInt ADD CONSTRAINT ProductAttributeValueInt_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE ProductAttributeValueInt ADD CONSTRAINT ProductAttributeValueInt_fk1 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE ProductAttributeValueVarchar ADD CONSTRAINT ProductAttributeValueVarchar_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE ProductAttributeValueVarchar ADD CONSTRAINT ProductAttributeValueVarchar_fk1 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE ProductAttributeValueFloat ADD CONSTRAINT ProductAttributeValueFloat_fk0 FOREIGN KEY (attribute_id) REFERENCES Attribute(id);

ALTER TABLE ProductAttributeValueFloat ADD CONSTRAINT ProductAttributeValueFloat_fk1 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE ShopReview ADD CONSTRAINT ShopReview_fk0 FOREIGN KEY (shop_id) REFERENCES Shop(id);

ALTER TABLE ProductCity ADD CONSTRAINT ProductCity_fk0 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE ProductCity ADD CONSTRAINT ProductCity_fk1 FOREIGN KEY (city_id) REFERENCES City(id);

ALTER TABLE Comment ADD CONSTRAINT Comment_fk0 FOREIGN KEY (product_id) REFERENCES Product(id);

ALTER TABLE Comment ADD CONSTRAINT Comment_fk1 FOREIGN KEY (parent_id) REFERENCES Comment(id);

ALTER TABLE Overview ADD CONSTRAINT Overview_fk0 FOREIGN KEY (product_id) REFERENCES Product(id);

                                </pre>
            </div>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>Indexes</div>
        <div data-content>
            <div>
<pre class="prettyprint lang-sql">

CREATE INDEX Product_name ON Product(name) USING BTREE;
CREATE INDEX Product_category_id_name ON Product(category_id, name) USING BTREE;
CREATE INDEX Product_vendor_id_category_id ON Product(vendor_id, category_id) USING BTREE;
CREATE INDEX Product_vendor_id_category_id_name ON Product(vendor_id, category_id, name) USING BTREE;

CREATE INDEX ProductShop_product_id_price ON ProductShop(product_id, price) USING BTREE;
CREATE INDEX ProductShop_product_id_delivery_type ON ProductShop(product_id, delivery_type) USING BTREE;

CREATE INDEX ProductCity_city_id_avg_price ON ProductCity(city_id, avg_price) USING BTREE;
CREATE INDEX ProductCity_city_id_min_price ON ProductCity(city_id, min_price) USING BTREE;

CREATE INDEX Attribute_name ON Attribute(name) USING BTREE;

CREATE INDEX Vendor_name ON Vendor(name) USING BTREE;

CREATE INDEX Shop_name ON Shop(name) USING BTREE;
CREATE INDEX Shop_city_id_name ON Shop(city_id, name) USING BTREE;
CREATE INDEX Shop_city_id_rating ON Shop(city_id, rating) USING BTREE;

CREATE INDEX City_name ON City(name) USING BTREE;

CREATE INDEX ShopReview_product_id_points ON ShopReview(shop_id, points) USING BTREE;
CREATE INDEX ShopReview_product_id_created ON ShopReview(shop_id, created) USING BTREE;

CREATE INDEX ProductReview_product_id_points ON ProductReview(product_id, points) USING BTREE;
CREATE INDEX ProductReview_product_id_created ON ProductReview(product_id, created) USING BTREE;

CREATE INDEX Comment_product_id_username ON Comment(product_id, username) USING BTREE;

CREATE INDEX Category_name ON Category(name) USING BTREE;
CREATE INDEX Category_range ON Category(lft, rgt) USING BTREE;
CREATE INDEX Category_lft ON Category(lft) USING BTREE;
CREATE INDEX Category_rft ON Category(rgt) USING BTREE;
</pre>
            </div>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>Stored procedures</div>
        <div data-content>
            <div>
                <pre class="prettyprint lang-sql">
DELIMITER $$

CREATE PROCEDURE addProductReview(IN productId INT, IN comment VARCHAR(1000),
                    IN pros VARCHAR(256), IN cons VARCHAR(256), IN points INT)
    NO SQL
BEGIN    
   INSERT INTO ProductReview(product_id, comment, pros, cons, points) VALUES (productId, comment, pros, cons, points);
END$$


CREATE PROCEDURE addShop(IN name VARCHAR(50), IN address VARCHAR(50), IN cityId INT(11))
    NO SQL
BEGIN
	SELECT MAX(id) INTO @max_id FROM Shop WHERE 1;
	INSERT INTO Shop (id, name, address, city_id, rating) VALUES (@max_id + 1, name, address, cityId, 0);
END$$


CREATE PROCEDURE addVendor(IN vendorName VARCHAR(50))
    NO SQL
BEGIN    
   INSERT INTO Vendor(name) VALUES (vendorName);
END$$


CREATE PROCEDURE buyProduct(IN productId INT, IN shopId INT, IN q INT)
    NO SQL
BEGIN
	UPDATE ProductShop SET cnt = cnt - q WHERE product_id = productId AND shop_id = shopId;
END$$

CREATE PROCEDURE deliverProduct(IN productId INT, IN shopId INT, IN q INT)
    NO SQL
BEGIN
	INSERT INTO ProductShop(product_id, shop_id, cnt) VALUES (productId, shopId, q) ON DUPLICATE KEY UPDATE cnt = cnt + q;
END$$


CREATE PROCEDURE getCategoryProducts(IN categoryId INT(11))
    NO SQL
SELECT * FROM Product WHERE category_id = categoryId$$

CREATE PROCEDURE getProductReviews(IN productId INT(11))
    NO SQL
SELECT * FROM Review WHERE product_id = productId$$

CREATE PROCEDURE getShopsWithProduct(IN productId INT(11))
    NO SQL
SELECT Shop.* FROM ProductShop INNER JOIN Shop ON (ProductShop.shop_id = Shop.id)
WHERE product_id = productId$$

CREATE PROCEDURE getShopsWithProductInCity(IN productId INT(11), IN cityId INT(11))
    NO SQL
BEGIN
	SELECT * 
	FROM (SELECT shop_id FROM ProductShop WHERE product_id = productId) AS PS INNER JOIN Shop ON (PS.shop_id = Shop.id)
	WHERE Shop.city_id = cityId;
END$$


CREATE PROCEDURE addCategory(IN categoryId INT(11), IN name VARCHAR(50) CHARSET utf8)
    NO SQL
BEGIN
    SELECT @myLeft := lft FROM Category WHERE id = categoryId;

    UPDATE Category SET rgt = rgt + 2 WHERE rgt > @myLeft;
    UPDATE Category SET lft = lft + 2 WHERE lft > @myLeft;

    INSERT INTO Category(name, lft, rgt) VALUES(name, @myLeft + 1, @myLeft + 2);
END$$

CREATE PROCEDURE removeCategory(IN categoryId INT(11))
    NO SQL
BEGIN
    SELECT @myLeft := lft, @myRight := rgt, @myWidth := rgt - lft + 1
    FROM Category
    WHERE id = categoryId;
    
    DELETE FROM Category WHERE lft BETWEEN @myLeft AND @myRight;
    
    UPDATE Category SET rgt = rgt - @myWidth WHERE rgt > @myRight;
    UPDATE Category SET lft = lft - @myWidth WHERE lft > @myRight;
END$$


CREATE PROCEDURE searchProductsByName(IN pName VARCHAR(50))
    NO SQL
BEGIN
	SELECT * FROM Product WHERE name LIKE CONCAT('%', pName , '%');
END$$

CREATE PROCEDURE searchShopsInCity(IN cityId INT(11), IN s VARCHAR(50), IN e INT)
    NO SQL
BEGIN
	IF (e = 1) then 
		EXPLAIN SELECT * FROM Shop WHERE city_id = cityId AND name LIKE CONCAT('%', s , '%');
    ELSE
    	SELECT * FROM Shop WHERE city_id = cityId AND name LIKE CONCAT('%', s , '%');
    end if;
END$$</pre>
            </div>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>Triggers</div>
        <div data-content>
            <div>
                                <pre class="prettyprint lang-sql">
CREATE TRIGGER update_product_rating AFTER INSERT ON ProductReview
 FOR EACH ROW BEGIN
	SELECT COUNT(*) INTO @cnt FROM ProductReview WHERE product_id = NEW.product_id;
	UPDATE Product SET rating = ((@cnt - 1) * rating + NEW.points) / @cnt
    WHERE id = NEW.product_id;
END

CREATE TRIGGER update_shop_rating AFTER INSERT ON ShopReview
 FOR EACH ROW BEGIN
    SELECT COUNT(*) INTO @cnt FROM ShopReview WHERE shop_id = NEW.shop_id;
	UPDATE Shop SET rating = ((@cnt - 1) * rating + NEW.points) / @cnt
    WHERE id = NEW.product_id;
END

CREATE TRIGGER update_prices AFTER INSERT ON ProductShop
 FOR EACH ROW BEGIN
    SELECT city_id INTO @city_id FROM Shop WHERE Shop.id = NEW.shop_id;
	SELECT MIN(price), AVG(price), MAX(price)
    INTO @min_price, @avg_price, @max_price
    FROM ProductShop AS PS INNER JOIN Shop AS S ON (PS.shop_id = S.id) 
    WHERE S.city_id = @city_id;
    UPDATE ProductCity SET min_price = @min_price, avg_price = @avg_price, max_price = @max_price
    WHERE product_id = NEW.product_id AND city_id = @city_id;
END
</pre>
            </div>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>Queries</div>
        <div data-content>
            <div>
                                <pre class="prettyprint lang-sql">
SELECT * FROM Shop WHERE name like '%Main Shop%';

SELECT * FROM Category WHERE name like '%smart%';

SELECT id FROM Category INTO @c_id WHERE name = 'Smartphones';
SELECT id FROM Vendor INTO @v_id WHERE name = 'Apple';
SELECT name FROM Product WHERE rating > 4.0 AND vendor_id = @v_id AND category_id = @c_id ORDER BY rating ASC;

SELECT FIRST(id) INTO @p_id FROM Product WHERE name LIKE '%iPhone 7S%';
SELECT S.name AS name, S.address AS address, S.rating AS rating
FROM ProductShop AS PS INNER JOIN Shop AS S ON (PS.shop_id = S.id)
WHERE PS.product_id = @p_id;

SELECT * FROM ProductCity WHERE product_id IN (SELECT id FROM Product WHERE name LIKE '%Google Pixel%')
ORDER BY avg_price;

</pre>
            </div>
        </div>
    </div>

    <div class="accordion" data-accordion>
        <div data-control>Test data</div>
        <div data-content>
            <div>
                <div data-accordion-group>
                    <div class="accordion" data-accordion>
                        <div data-control>Raw SQL</div>
                        <div data-content>
                            <div>
                                <pre class="prettyprint lang-sql">
INSERT INTO Category (id, lft, rgt, name) VALUES
(1, 1, 16, 'All items'),
(2, 2, 15, 'Electronics'),
(3, 9, 14, 'Smartphones'),
(4, 12, 13, 'iOS'),
(5, 10, 11, 'Android'),
(6, 7, 8, 'Laptops'),
(7, 5, 6, 'Smart-watches'),
(8, 3, 4, 'TV');

INSERT INTO City (id, name) VALUES
(1, 'Saint-Petersburg'),
(2, 'Moscow'),
(3, 'Stavropol'),
(4, 'Saratov'),
(5, 'Krasnodar');

INSERT INTO Vendor (id, name) VALUES
(1, 'Apple'),
(6, 'Huawei'),
(2, 'LG'),
(9, 'Meizu'),
(8, 'Nokia'),
(10, 'Nubia'),
(5, 'OnePlus'),
(4, 'Oppo'),
(7, 'Samsung'),
(3, 'Xiaomi');</pre>
                            </div>
                        </div>
                    </div>
                    <div class="accordion" data-accordion>
                        <div data-control>Init script</div>
                        <div data-content>
                            <script src="https://gist.github.com/alexchekmenev/d373aec961b57e576532610675fd8ca4.js"></script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



</div>
<script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
<script src="js/lang-sql.js"></script>
<script src="https://rawgit.com/vctrfrnndz/jquery-accordion/master/js/jquery.accordion.js"></script>
<script>
    $('.accordion').accordion({
        "transitionSpeed": 300,
        singleOpen: false
    });
</script>
</body>
</html>
